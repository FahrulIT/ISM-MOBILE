
@*@model IEnumerable<ISM_MOBILE.Models.Chart.YarnStockChart>*@
@{
    ViewBag.Title = "Chart";
}

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script>
    var donutchart_obj = '@ViewBag.strDonutChart';
    var donutJson = JSON.parse(donutchart_obj);

    var barhorzchart_obj = '@ViewBag.strBarHorzChart'
    var barhorzJson = JSON.parse(barhorzchart_obj);

    var donutchartgrey_obj = '@ViewBag.strDonutChart_Grey';
    var donutJson_Grey = JSON.parse(donutchartgrey_obj);
</script>

<script type="text/javascript">
    google.charts.load("current", { packages: ["corechart"] });

    google.charts.setOnLoadCallback(drawChart);
 
    function drawChart()
    {
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Type');
        data.addColumn('number', 'Value');
        data.addRows(donutJson);

        var DonutChart_options =
        {
            //title: 'Yarn Stock',          
            chartArea: { width: '100%', height: '85%' },
            legend: {
                textStyle: { fontSize: 14 },
                position: 'right'
               
            },
            pieHole: 0.5,
            colors: [ '#dc3912','#3366cc']
        };

        var chart = new google.visualization.PieChart(document.getElementById('donutchart'));
        chart.draw(data, DonutChart_options);


        //Bar Horizontal Chart with Data Annotation

        var data2 = new google.visualization.DataTable();
        data2.addColumn('string', 'Item');
        data2.addColumn('number', 'Value');
        data2.addColumn({ type: 'string', role: 'style' });
        data2.addRows(barhorzJson);

        var BarHorChart_options = 
        {
            //title: 'Barchart',
            //bar: { groupWidth: "80%" },
            fontSize: 8,            
            legend: { position: "none" },
            chartArea: { width: '50%' },
            annotations: {
                alwaysOutside: true,
                textStyle: {
                    fontSize: 10,
                    auraColor: 'none',
                    color: '#555'
                },
         
            },
            haxisTitlesPosition : 'out',
            hAxis: {
                title: 'lbs',
                minValue: 0
            },
            vAxis: {
                title: 'Yarn'
            }

        }

        //var chart = new google.visualization.BarChart(document.getElementById('barchart'));
        //chart.draw(data, BarHorChart_options);

        var view = new google.visualization.DataView(data2);
        view.setColumns([0, 1,
           {
               calc: "stringify",
               sourceColumn: 1,
               type: "string",
               role: "annotation"
           }, 2
        ]);

        var chart = new google.visualization.BarChart(document.getElementById('barchart'));
        chart.draw(view, BarHorChart_options);

        var DonutChartGrey_Data = new google.visualization.DataTable();
        DonutChartGrey_Data.addColumn('string', 'Grade');
        DonutChartGrey_Data.addColumn('number', 'Value');
        DonutChartGrey_Data.addRows(donutJson_Grey);

        var GreyDonut_options =
       {
           //title: 'Yarn Stock',          
           chartArea: { width: '100%', height: '85%' },
           legend: {
               textStyle: { fontSize: 14 },
               position: 'right',
               maxLines : 20

           },
           pieHole: 0.5,
           //colors: ['#dc3912', '#3366cc']
       };

        var chart = new google.visualization.PieChart(document.getElementById('donutchartGreyStock'));
        chart.draw(DonutChartGrey_Data, GreyDonut_options);

    }

          
</script>

@*<style>
    #chart_warp{
        position: relative;
        padding-bottom: 100%;
        height: 0;
        overflow: hidden;
    }

    #donutchart {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 300px;
    }

</style>*@

@*<div id="chart_warp">
    <div id="donutchart"> 
    </div>
    <div id="chart">
    </div>
</div>*@
@*<div class="table-responsive">
    <table class="table">
        <tr>
            <td><div id="donutchart" style="border: 1px solid #ccc"></div></td>
        </tr>
        <tr>
            <td><div id="barchart" style="border: 1px solid #ccc"></div></td>
        </tr>
    </table>
</div>*@

<div class="jumbotron">
        <h2>TORAY ISTEM MOBILE SYSTEM</h2>
    <p class="lead">Dashboard Yarn, Grey, Finishgoods Stock</p>
</div>

<div class="row">
    <div class="col-md-4" >
        <p class="lead">Yarn Stock</p>
        <div id="donutchart" ></div>
    </div>
    <div class="col-md-4">
        <div id="barchart"></div>
    </div>
    <div class="col-md-4">
        <p class="lead">Grey Stock</p>
        <div id="donutchartGreyStock"></div>
    </div>
</div>

 

    @*<style>

            #donutchart,
        #chart {
          width: 500px;
          height: 500px;
          font-family: Arial;
        }

        #donutchart {
            position: relative;
        }

        #labelOverlay {
            width: 90px;
            height: 45px;
            position: absolute;
            top: 233px;
            left: 225px;
            text-align: center;
            cursor: default;
        }

        #labelOverlay p {
          line-height: 0.3;
          padding:0;
          margin: 8px;
        }

        #labelOverlay p.used-size {
          line-height: 0.5;
          font-size: 20pt;
          color: #8e8e8e;
        }

        #labelOverlay p.total-size {
          line-height: 0.5;
          font-size: 12pt;
          color: #cdcdcd;
        }
        </style>

        <div id="donutchart" class="col-xs-12 col-sm-6 col-md-4">
            <div id="chart"></div>
            <div id="labelOverlay">
                <p class="used-size">41<span>GB</span></p>
                <p class="total-size"> of 50GB</p>
            </div>
        </div>*@


    @*<table>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Type)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Value)
            </th>
                 <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Type)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Value)
                </td>
                <td>
                   @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                </td>
            </tr>
        }
        </table>*@
